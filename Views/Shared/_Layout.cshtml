<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - QuantumDesk</title>

    <!-- Favicon -->
    <link rel="icon" type="image/png" href="~/favicon.ico">

    <!-- CSS libraries -->
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/quantumdesk-theme.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />

    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700;800&display=swap" rel="stylesheet">

    <!-- Font Awesome Icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">

    <!-- Syncfusion styles (if needed) -->
    <link rel="stylesheet" href="https://cdn.syncfusion.com/ej2/29.1.33/material.css" />

    <!-- Page-specific styles -->
    @await RenderSectionAsync("Styles", required: false)

    <!-- Preloading animation -->
    <style>
        .quantum-preloader {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: white;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            z-index: 9999;
            transition: opacity 0.5s, visibility 0.5s;
        }

            .quantum-preloader.fade-out {
                opacity: 0;
                visibility: hidden;
            }

        .quantum-loader {
            width: 48px;
            height: 48px;
            border: 5px solid #f3f3f3;
            border-radius: 50%;
            border-top: 5px solid var(--quantum-secondary);
            animation: spin 1s linear infinite;
        }

        .quantum-loader-text {
            margin-top: 1rem;
            font-family: 'Poppins', sans-serif;
            color: var(--quantum-secondary);
            font-weight: 500;
        }


        /* Subtle background pattern */
        body {
            background-color: #f5f7fa;
            background-image: url("data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%23e0e6ed' fill-opacity='0.4'%3E%3Cpath d='M36 34v-4h-2v4h-4v2h4v4h2v-4h4v-2h-4zm0-30V0h-2v4h-4v2h4v4h2V6h4V4h-4zM6 34v-4H4v4H0v2h4v4h2v-4h4v-2H6zM6 4V0H4v4H0v2h4v4h2V6h4V4H6z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E");
        }

        /* Back to top button */
        .back-to-top {
            position: fixed;
            bottom: 30px;
            right: 30px;
            width: 45px;
            height: 45px;
            background-color: var(--quantum-secondary);
            color: white;
            border-radius: 50%;
            display: flex;
            justify-content: center;
            align-items: center;
            box-shadow: 0 4px 12px rgba(0, 167, 142, 0.3);
            cursor: pointer;
            opacity: 0;
            visibility: hidden;
            transition: all 0.3s ease;
            z-index: 100;
        }

            .back-to-top.visible {
                opacity: 1;
                visibility: visible;
            }

            .back-to-top:hover {
                transform: translateY(-5px);
            }

        /* Toast styling */
        .toast {
            border: none;
            border-radius: 0.5rem;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
            opacity: 1;
        }

        .toast-header {
            border-bottom: none;
            border-top-left-radius: 0.5rem;
            border-top-right-radius: 0.5rem;
            padding: 0.75rem 1rem;
        }

        .toast-body {
            padding: 1rem;
        }
    </style>
</head>

<body>
    <!-- Preloader -->
    <div class="quantum-preloader">
        <div class="quantum-loader"></div>
        <p class="quantum-loader-text">Loading QuantumDesk...</p>
    </div>

    <!-- Header -->
    <header>
        <partial name="_Navbar" />
    </header>

    <!-- Main Content -->
    <main role="main" class="py-3">
        @RenderBody()
    </main>

    <!-- Footer -->
    <footer>
        <partial name="_Footer" />
    </footer>

    <!-- Back to top button -->
    <div class="back-to-top">
        <i class="fas fa-arrow-up"></i>
    </div>

    <!-- Toast container for notifications -->
    <div class="toast-container position-fixed bottom-0 end-0 p-3">
        @if (TempData["SuccessMessage"] != null)
        {
            <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
                <div class="toast-header bg-success text-white">
                    <i class="fas fa-check-circle me-2"></i>
                    <strong class="me-auto">Success</strong>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast" aria-label="Close"></button>
                </div>
                <div class="toast-body">
                    @TempData["SuccessMessage"]
                </div>
            </div>
        }

        @if (TempData["ErrorMessage"] != null)
        {
            <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
                <div class="toast-header bg-danger text-white">
                    <i class="fas fa-exclamation-circle me-2"></i>
                    <strong class="me-auto">Error</strong>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast" aria-label="Close"></button>
                </div>
                <div class="toast-body">
                    @TempData["ErrorMessage"]
                </div>
            </div>
        }

        @if (TempData["InfoMessage"] != null)
        {
            <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
                <div class="toast-header bg-info text-white">
                    <i class="fas fa-info-circle me-2"></i>
                    <strong class="me-auto">Information</strong>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast" aria-label="Close"></button>
                </div>
                <div class="toast-body">
                    @TempData["InfoMessage"]
                </div>
            </div>
        }
    </div>

    <!-- JavaScript libraries -->
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/quantumdesk.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>

    <!-- Syncfusion scripts (if needed) -->
    <script src="https://cdn.syncfusion.com/ej2/29.1.33/dist/ej2.min.js"></script>
    @Html.EJS().ScriptManager()

    <!-- Page-specific scripts -->
    @await RenderSectionAsync("Scripts", required: false)

    <!-- Custom script for page enhancements -->
    <script>
        // Handle page preloader
        document.addEventListener('DOMContentLoaded', function() {
            setTimeout(function() {
                document.querySelector('.quantum-preloader').classList.add('fade-out');
            }, 500);
        });

        // Handle back to top button
        window.addEventListener('scroll', function() {
            const backToTopButton = document.querySelector('.back-to-top');
            if (window.scrollY > 300) {
                backToTopButton.classList.add('visible');
            } else {
                backToTopButton.classList.remove('visible');
            }
        });

        document.querySelector('.back-to-top').addEventListener('click', function() {
            window.scrollTo({
                top: 0,
                behavior: 'smooth'
            });
        });

        // Auto-hide toasts after 5 seconds
        const toasts = document.querySelectorAll('.toast');
        toasts.forEach(toast => {
            setTimeout(() => {
                const bsToast = new bootstrap.Toast(toast);
                bsToast.hide();
            }, 5000);
        });

        // Initialize tooltips and popovers
        var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
        var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
            return new bootstrap.Tooltip(tooltipTriggerEl)
        });

        var popoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="popover"]'))
        var popoverList = popoverTriggerList.map(function (popoverTriggerEl) {
            return new bootstrap.Popover(popoverTriggerEl)
        });

        // Add animation classes to elements when they come into view
        const animateOnScroll = function() {
            const elements = document.querySelectorAll('.animate-on-scroll');
            elements.forEach(element => {
                const position = element.getBoundingClientRect();
                if(position.top < window.innerHeight) {
                    element.classList.add('fade-in');
                }
            });
        };

        window.addEventListener('scroll', animateOnScroll);
        window.addEventListener('load', animateOnScroll);
    </script>
</body>
</html>