// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Ticketing_System;

#nullable disable

namespace Ticketing_System.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Ticketing_System.Models.AssignmentRule", b =>
                {
                    b.Property<int>("RuleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RuleID"));

                    b.Property<int?>("AssignToTeamID")
                        .HasColumnType("int");

                    b.Property<string>("AssignToUserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("CategoryID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("PriorityID")
                        .HasColumnType("int");

                    b.Property<string>("RuleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("RuleOrder")
                        .HasColumnType("int");

                    b.HasKey("RuleID");

                    b.HasIndex("AssignToTeamID");

                    b.HasIndex("AssignToUserID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("PriorityID");

                    b.ToTable("AssignmentRules");
                });

            modelBuilder.Entity("Ticketing_System.Models.Attachment", b =>
                {
                    b.Property<int>("AttachmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AttachmentID"));

                    b.Property<int?>("CommentID")
                        .HasColumnType("int");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<int>("TicketID")
                        .HasColumnType("int");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UploadedByUserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AttachmentID");

                    b.HasIndex("CommentID");

                    b.HasIndex("TicketID");

                    b.HasIndex("UploadedByUserID");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("Ticketing_System.Models.EscalationRule", b =>
                {
                    b.Property<int>("RuleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RuleID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("EscalateAfterHours")
                        .HasColumnType("int");

                    b.Property<int?>("EscalateToTeamID")
                        .HasColumnType("int");

                    b.Property<string>("EscalateToUserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("NotifyUserIDs")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PriorityID")
                        .HasColumnType("int");

                    b.Property<string>("RuleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("StatusID")
                        .HasColumnType("int");

                    b.HasKey("RuleID");

                    b.HasIndex("EscalateToTeamID");

                    b.HasIndex("EscalateToUserID");

                    b.HasIndex("PriorityID");

                    b.HasIndex("StatusID");

                    b.ToTable("EscalationRules");
                });

            modelBuilder.Entity("Ticketing_System.Models.KnowledgeBaseArticle", b =>
                {
                    b.Property<int>("ArticleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ArticleID"));

                    b.Property<string>("AuthorID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("CategoryID")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int");

                    b.HasKey("ArticleID");

                    b.HasIndex("AuthorID");

                    b.HasIndex("CategoryID");

                    b.ToTable("KnowledgeBaseArticles");
                });

            modelBuilder.Entity("Ticketing_System.Models.Notification", b =>
                {
                    b.Property<int>("NotificationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationID"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NotificationType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("TicketID")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("NotificationID");

                    b.HasIndex("IsRead");

                    b.HasIndex("TicketID");

                    b.HasIndex("UserID");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Ticketing_System.Models.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Ticketing_System.Models.SupportTeam", b =>
                {
                    b.Property<int>("TeamID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeamID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ManagerID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("TeamID");

                    b.HasIndex("ManagerID");

                    b.ToTable("SupportTeams");
                });

            modelBuilder.Entity("Ticketing_System.Models.TeamMember", b =>
                {
                    b.Property<int>("TeamID")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("datetime2");

                    b.HasKey("TeamID", "UserID");

                    b.HasIndex("UserID");

                    b.ToTable("TeamMembers");
                });

            modelBuilder.Entity("Ticketing_System.Models.Ticket", b =>
                {
                    b.Property<int>("TicketID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TicketID"));

                    b.Property<int?>("AssignedToTeamID")
                        .HasColumnType("int");

                    b.Property<string>("AssignedToUserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ClosedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedByUserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsEscalated")
                        .HasColumnType("bit");

                    b.Property<int>("PriorityID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ResolutionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("StatusID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("TicketID");

                    b.HasIndex("AssignedToTeamID");

                    b.HasIndex("AssignedToUserID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("CreatedDate");

                    b.HasIndex("DueDate");

                    b.HasIndex("PriorityID");

                    b.HasIndex("StatusID");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("Ticketing_System.Models.TicketCategory", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryID"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("ParentCategoryID")
                        .HasColumnType("int");

                    b.HasKey("CategoryID");

                    b.HasIndex("ParentCategoryID");

                    b.ToTable("TicketCategories");
                });

            modelBuilder.Entity("Ticketing_System.Models.TicketComment", b =>
                {
                    b.Property<int>("CommentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentID"));

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CommentText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsInternal")
                        .HasColumnType("bit");

                    b.Property<int>("TicketID")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CommentID");

                    b.HasIndex("TicketID");

                    b.HasIndex("UserID");

                    b.ToTable("TicketComments");
                });

            modelBuilder.Entity("Ticketing_System.Models.TicketHistory", b =>
                {
                    b.Property<int>("HistoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HistoryID"));

                    b.Property<string>("ChangedByUserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ChangedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FieldName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NewValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TicketID")
                        .HasColumnType("int");

                    b.HasKey("HistoryID");

                    b.HasIndex("ChangedByUserID");

                    b.HasIndex("TicketID");

                    b.ToTable("TicketHistory");
                });

            modelBuilder.Entity("Ticketing_System.Models.TicketPriority", b =>
                {
                    b.Property<int>("PriorityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PriorityID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PriorityName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SLAResolutionHours")
                        .HasColumnType("int");

                    b.Property<int>("SLAResponseHours")
                        .HasColumnType("int");

                    b.HasKey("PriorityID");

                    b.ToTable("TicketPriorities");

                    b.HasData(
                        new
                        {
                            PriorityID = 1,
                            Description = "Problème mineur sans impact significatif",
                            PriorityName = "Low",
                            SLAResolutionHours = 72,
                            SLAResponseHours = 24
                        },
                        new
                        {
                            PriorityID = 2,
                            Description = "Problème avec impact limité",
                            PriorityName = "Medium",
                            SLAResolutionHours = 48,
                            SLAResponseHours = 12
                        },
                        new
                        {
                            PriorityID = 3,
                            Description = "Problème avec impact important",
                            PriorityName = "High",
                            SLAResolutionHours = 24,
                            SLAResponseHours = 4
                        },
                        new
                        {
                            PriorityID = 4,
                            Description = "Problème urgent avec impact majeur",
                            PriorityName = "Critical",
                            SLAResolutionHours = 8,
                            SLAResponseHours = 1
                        });
                });

            modelBuilder.Entity("Ticketing_System.Models.TicketStatus", b =>
                {
                    b.Property<int>("StatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsClosedStatus")
                        .HasColumnType("bit");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("StatusID");

                    b.ToTable("TicketStatuses");

                    b.HasData(
                        new
                        {
                            StatusID = 1,
                            Description = "Ticket nouvellement créé",
                            IsClosedStatus = false,
                            StatusName = "New"
                        },
                        new
                        {
                            StatusID = 2,
                            Description = "Ticket en cours de traitement par un agent",
                            IsClosedStatus = false,
                            StatusName = "In Progress"
                        },
                        new
                        {
                            StatusID = 3,
                            Description = "Ticket en attente d'information ou d'action",
                            IsClosedStatus = false,
                            StatusName = "On Hold"
                        },
                        new
                        {
                            StatusID = 4,
                            Description = "Ticket résolu mais en attente de confirmation",
                            IsClosedStatus = false,
                            StatusName = "Resolved"
                        },
                        new
                        {
                            StatusID = 5,
                            Description = "Ticket fermé et complété",
                            IsClosedStatus = true,
                            StatusName = "Closed"
                        },
                        new
                        {
                            StatusID = 6,
                            Description = "Ticket annulé",
                            IsClosedStatus = true,
                            StatusName = "Cancelled"
                        });
                });

            modelBuilder.Entity("Ticketing_System.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Ticketing_System.Models.UserPreference", b =>
                {
                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("DarkModeEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("DefaultDashboard")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("EmailNotifications")
                        .HasColumnType("bit");

                    b.Property<bool>("InAppNotifications")
                        .HasColumnType("bit");

                    b.Property<int>("ItemsPerPage")
                        .HasColumnType("int");

                    b.HasKey("UserID");

                    b.ToTable("UserPreferences");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Ticketing_System.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Ticketing_System.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Ticketing_System.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Ticketing_System.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ticketing_System.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Ticketing_System.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ticketing_System.Models.AssignmentRule", b =>
                {
                    b.HasOne("Ticketing_System.Models.SupportTeam", "AssignToTeam")
                        .WithMany("AssignmentRules")
                        .HasForeignKey("AssignToTeamID");

                    b.HasOne("Ticketing_System.Models.User", "AssignToUser")
                        .WithMany()
                        .HasForeignKey("AssignToUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ticketing_System.Models.TicketCategory", "Category")
                        .WithMany("AssignmentRules")
                        .HasForeignKey("CategoryID");

                    b.HasOne("Ticketing_System.Models.TicketPriority", "Priority")
                        .WithMany("AssignmentRules")
                        .HasForeignKey("PriorityID");

                    b.Navigation("AssignToTeam");

                    b.Navigation("AssignToUser");

                    b.Navigation("Category");

                    b.Navigation("Priority");
                });

            modelBuilder.Entity("Ticketing_System.Models.Attachment", b =>
                {
                    b.HasOne("Ticketing_System.Models.TicketComment", "Comment")
                        .WithMany("Attachments")
                        .HasForeignKey("CommentID");

                    b.HasOne("Ticketing_System.Models.Ticket", "Ticket")
                        .WithMany("Attachments")
                        .HasForeignKey("TicketID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ticketing_System.Models.User", "UploadedByUser")
                        .WithMany("Attachments")
                        .HasForeignKey("UploadedByUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("Ticket");

                    b.Navigation("UploadedByUser");
                });

            modelBuilder.Entity("Ticketing_System.Models.EscalationRule", b =>
                {
                    b.HasOne("Ticketing_System.Models.SupportTeam", "EscalateToTeam")
                        .WithMany("EscalationRules")
                        .HasForeignKey("EscalateToTeamID");

                    b.HasOne("Ticketing_System.Models.User", "EscalateToUser")
                        .WithMany()
                        .HasForeignKey("EscalateToUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ticketing_System.Models.TicketPriority", "Priority")
                        .WithMany("EscalationRules")
                        .HasForeignKey("PriorityID");

                    b.HasOne("Ticketing_System.Models.TicketStatus", "Status")
                        .WithMany("EscalationRules")
                        .HasForeignKey("StatusID");

                    b.Navigation("EscalateToTeam");

                    b.Navigation("EscalateToUser");

                    b.Navigation("Priority");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Ticketing_System.Models.KnowledgeBaseArticle", b =>
                {
                    b.HasOne("Ticketing_System.Models.User", "Author")
                        .WithMany("Articles")
                        .HasForeignKey("AuthorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ticketing_System.Models.TicketCategory", "Category")
                        .WithMany("KnowledgeBaseArticles")
                        .HasForeignKey("CategoryID");

                    b.Navigation("Author");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Ticketing_System.Models.Notification", b =>
                {
                    b.HasOne("Ticketing_System.Models.Ticket", "Ticket")
                        .WithMany("Notifications")
                        .HasForeignKey("TicketID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ticketing_System.Models.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ticket");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ticketing_System.Models.SupportTeam", b =>
                {
                    b.HasOne("Ticketing_System.Models.User", "Manager")
                        .WithMany("ManagedTeams")
                        .HasForeignKey("ManagerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("Ticketing_System.Models.TeamMember", b =>
                {
                    b.HasOne("Ticketing_System.Models.SupportTeam", "Team")
                        .WithMany("TeamMembers")
                        .HasForeignKey("TeamID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ticketing_System.Models.User", "User")
                        .WithMany("TeamMemberships")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ticketing_System.Models.Ticket", b =>
                {
                    b.HasOne("Ticketing_System.Models.SupportTeam", "AssignedToTeam")
                        .WithMany("AssignedTickets")
                        .HasForeignKey("AssignedToTeamID");

                    b.HasOne("Ticketing_System.Models.User", "AssignedToUser")
                        .WithMany("AssignedTickets")
                        .HasForeignKey("AssignedToUserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Ticketing_System.Models.TicketCategory", "Category")
                        .WithMany("Tickets")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ticketing_System.Models.User", "CreatedByUser")
                        .WithMany("CreatedTickets")
                        .HasForeignKey("CreatedByUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Ticketing_System.Models.TicketPriority", "Priority")
                        .WithMany("Tickets")
                        .HasForeignKey("PriorityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ticketing_System.Models.TicketStatus", "Status")
                        .WithMany("Tickets")
                        .HasForeignKey("StatusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssignedToTeam");

                    b.Navigation("AssignedToUser");

                    b.Navigation("Category");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Priority");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Ticketing_System.Models.TicketCategory", b =>
                {
                    b.HasOne("Ticketing_System.Models.TicketCategory", "ParentCategory")
                        .WithMany("ChildCategories")
                        .HasForeignKey("ParentCategoryID");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("Ticketing_System.Models.TicketComment", b =>
                {
                    b.HasOne("Ticketing_System.Models.Ticket", "Ticket")
                        .WithMany("Comments")
                        .HasForeignKey("TicketID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ticketing_System.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ticket");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ticketing_System.Models.TicketHistory", b =>
                {
                    b.HasOne("Ticketing_System.Models.User", "ChangedByUser")
                        .WithMany("TicketChanges")
                        .HasForeignKey("ChangedByUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ticketing_System.Models.Ticket", "Ticket")
                        .WithMany("History")
                        .HasForeignKey("TicketID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChangedByUser");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("Ticketing_System.Models.UserPreference", b =>
                {
                    b.HasOne("Ticketing_System.Models.User", "User")
                        .WithOne("Preference")
                        .HasForeignKey("Ticketing_System.Models.UserPreference", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ticketing_System.Models.SupportTeam", b =>
                {
                    b.Navigation("AssignedTickets");

                    b.Navigation("AssignmentRules");

                    b.Navigation("EscalationRules");

                    b.Navigation("TeamMembers");
                });

            modelBuilder.Entity("Ticketing_System.Models.Ticket", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("Comments");

                    b.Navigation("History");

                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("Ticketing_System.Models.TicketCategory", b =>
                {
                    b.Navigation("AssignmentRules");

                    b.Navigation("ChildCategories");

                    b.Navigation("KnowledgeBaseArticles");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Ticketing_System.Models.TicketComment", b =>
                {
                    b.Navigation("Attachments");
                });

            modelBuilder.Entity("Ticketing_System.Models.TicketPriority", b =>
                {
                    b.Navigation("AssignmentRules");

                    b.Navigation("EscalationRules");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Ticketing_System.Models.TicketStatus", b =>
                {
                    b.Navigation("EscalationRules");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Ticketing_System.Models.User", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("AssignedTickets");

                    b.Navigation("Attachments");

                    b.Navigation("Comments");

                    b.Navigation("CreatedTickets");

                    b.Navigation("ManagedTeams");

                    b.Navigation("Notifications");

                    b.Navigation("Preference")
                        .IsRequired();

                    b.Navigation("TeamMemberships");

                    b.Navigation("TicketChanges");
                });
#pragma warning restore 612, 618
        }
    }
}
